 type Query  {
     findAllAuthors: [Author]!
     findAuthorById(id: ID): Author
     findAuthorsByFirstName(firstName: String): [Author]!

     findAllBooks: [Book]!
     findBookById(id: ID): Book
     findAllByTitle(title: String): [Book]
     findAllBooksByAuthorId(id: ID): [Book] # 1 query korzystajace z innej encji
     findAllBooksByCountry(country: String): [Book] # 3 query korzystajace z innych encji
     findAllBooksWrittenBy(authorsLastName: String): [Book] # 5 query korzystajace z innej encji

     findAllAddresses: [Address]!
     findAddressById(id: ID): Address
     findAllByCountry(country: String): [Address]

     findAllUsers: [User]!
     findUserById(id: ID): User
     findUsersByFirstName(firstName: String): [User]
     findUsersByCountry(country: String): [User] # 2 query korzystajÄ…ce z innej encji
     findUsersByCity(city: String): [User] # 4 query korzystajace z inne encji
}

type Mutation {
    addBook(book: BookGQL): Book
    changeBookName(id: ID, title: String): Book
    deleteBookById(id: ID): ID

    addAuthor(author: AuthorGQL): Author
    changeAuthorsName(id: ID, firstName: String, lastName: String): Author
    deleteAuthorById(id: ID): ID

    addAddress(address: AddressGQL): Address
    changeAddressCountry(id: ID, country: String): Address
    deleteAddressById(id: ID): ID

    addUser(user: UserGQL): User
    changeUserEmail(id: ID, email: String): User
    deleteUserById(id: ID): ID
}

type Book {
    id: ID
    title: String
    numberOfPages: Int
    yearOfPublication: Int
    price: Float
    author: ID
}

input BookGQL {
    id: ID
    title: String
    numberOfPages: Int
    yearOfPublication: Int
    price: Float
    author: ID
}

type User {
    id: ID
    email: String
    password: String
    firstName: String
    lastName: String
    phoneNumber: String
    address: ID
}

input UserGQL {
    id: ID
    email: String
    password: String
    firstName: String
    lastName: String
    phoneNumber: String
    address: ID
}

type Author {
    id: ID
    firstName: String
    lastName: String
}

input AuthorGQL {
    id: ID
    firstName: String
    lastName: String
}

type Address {
    id: ID
    city: String
    country: String
}

 input AddressGQL {
     id: ID
     city: String
     country: String
 }
